<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.king.dao.MySchoolUserDao">

    <resultMap type="com.king.entity.MySchoolUserEntity" id="myUserSchoolMap">
        <result property="id" column="id"/>
        <result property="userId" column="user_id"/>
		<result property="schoolParentId" column="school_parent_id"/>
        <result property="schoolId" column="school_id"/>
		<result property="status" column="status"/>
        <result property="enabled" column="enabled"/>
        <result property="createTime" column="create_time"/>
        <result property="updateTime" column="update_time"/>
    </resultMap>

	<select id="getOneBySchoolParentAndUserId" resultType="com.king.entity.MySchoolUserEntity">
			select
			`id`,
			`user_id`,
			`school_parent_id`,
			`school_id`,
			`status`,
			`enabled`,
			check_type,
			certificate_no,
			refuse_reason

		from my_school_user
		where school_parent_id = #{schoolParentId} and user_id = #{userId}
	</select>

	<update id="updateStatusById">
		update my_school_user
		set status = #{status}
		where id =#{id}
	</update>

	<update id="updateStatusAndRefuseReasonById">
		update my_school_user
		set status = #{status},refuse_reason=#{refuseReason}
		where id =#{id}
	</update>

	<select id="getCheckedUserIdListByTelephoneList" resultType="list">
		select s.user_id as userId
		from my_school_user s
		inner join my_user u on s.user_id = u.id
		where s.status = 2 and s.enabled =1 and  u.mobile in
		<foreach collection="telephoneList" open="(" close=")" separator="," item="telephone">
			#{telephone}
		</foreach>
	</select>

	<update id="updateStatusAndCheckTypeById">
		update my_school_user
		set status = #{status} and check_type=#{checkType} where id = #{id}
	</update>

	<update id="updateStatusAndCheckTypeAndCertificateNoById">
		update my_school_user
		set status = #{status} and check_type=#{checkType} and certificate_no = #{certificateNo}  where id = #{id}
	</update>

	<select id="getApplyingUserListBySchoolParentId" resultType="com.king.entity.MyUserEntity">
		select
		`name`,
		check_type,
		certificate_no,
		id school_user_id,
		su.user_id id
		from my_school_user su
		inner join my_user u on su.user_id = u.id
		where su.school_parent_id = #{schoolParentId} and su.status = 1 order by su.update_time
	</select>

	<select id="getApplyingUserListBySchoolIdList" resultType="com.king.entity.MyUserEntity">
		select
		`name`,
		check_type,
		certificate_no,
		id school_user_id,
		su.user_id id
		from my_school_user su
		inner join my_user u on su.user_id = u.id
		where su.school_id in

		<foreach collection="schoolIdList" item="id" close=")" open="(" separator=",">
			#{id}
		</foreach>

		and su.status = 1 and check_type=3 order by su.update_time
	</select>

	<insert id="insert" keyProperty="id" useGeneratedKeys="true">
		insert into my_school_user(
			`user_id`,
			`school_parent_id`,
			`school_id`,
			`check_type`)
		values(
			#{userId},
			#{schoolParentId},
			#{schoolId},
			#{checkType})
	</insert>

	<select id="queryObject" resultType="com.king.entity.MySchoolUserEntity">
		select
			`id`,
			`user_id`,
			`school_parent_id`,
			`school_id`,
			`status`,
			`enabled`,
			`create_time`,
			`update_time`
		from my_school_user
		where id = #{id}
	</select>

	<select id="queryList" resultType="com.king.entity.MySchoolUserEntity">
		select
    		`id`,
    		`user_id`,
			`school_parent_id`,
    		`school_id`,
			`status`,
    		`enabled`,
    		`create_time`,
    		`update_time`
		from my_school_user
		WHERE 1=1
		<if test="userId != null">
			AND user_id = #{userId}
		</if>
		<if test="schoolParentId != null">
			AND school_parent_id = #{schoolParentId}
		</if>
		<if test="schoolId != null">
			AND school_id = #{schoolId}
		</if>
        <choose>
            <when test="sidx != null and sidx.trim() != ''">
                order by ${sidx} ${order}
            </when>
			<otherwise>
                order by id desc
			</otherwise>
        </choose>
		<if test="offset != null and limit != null">
			limit #{offset}, #{limit}
		</if>
	</select>
	
 	<select id="queryTotal" resultType="int">
		select count(*) from my_school_user
		WHERE 1=1
        <if test="name != null and name.trim() != ''">
            AND name LIKE concat('%',#{name},'%')
        </if>
	</select>
	 
	<insert id="save" parameterType="com.king.entity.MySchoolUserEntity" useGeneratedKeys="true" keyProperty="id">
		insert into my_school_user(
			`user_id`,
			`school_parent_id`,
			`school_id`,
			`status`,
			`enabled`,
			`create_time`,
			`update_time`)
		values(
			#{userId},
			#{schoolParentId},
			#{schoolId},
			#{status},
			#{enabled},
			#{createTime},
			#{updateTime})
	</insert>
	 
	<update id="update" parameterType="com.king.entity.MySchoolUserEntity">
		update my_school_user
		<set>
			<if test="userId != null">`user_id` = #{userId}, </if>
			<if test="schoolParentId != null">`school_parent_id` = #{schoolParentId},</if>
			<if test="schoolId != null">`school_id` = #{schoolId}, </if>
			<if test="status != null">`status` = #{status},</if>
			<if test="enabled != null">`enabled` = #{enabled}, </if>
			<if test="createTime != null">`create_time` = #{createTime}, </if>
			<if test="updateTime != null">`update_time` = #{updateTime}</if>
		</set>
		where id = #{id}
	</update>
	
	<delete id="delete">
		delete from my_school_user where id = #{value}
	</delete>
	
	<delete id="deleteBatch">
		delete from my_school_user where id in
		<foreach item="id" collection="array" open="(" separator="," close=")">
			#{id}
		</foreach>
	</delete>

</mapper>